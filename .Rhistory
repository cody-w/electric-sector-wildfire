# Palettes
color_scheme <- c(color_orange, color_green, color_blue, color_purple)
main_scheme  <- c("#A6611A", "#DFC27D", "#80CDC1", "#018571")
tranche_scheme <- c('#ffcc00','#ff6600', '#ff0000', '#8c0099')
# Options
sf_use_s2(FALSE)
options(dplyr.summarise.inform=F)
# Plotting parameters
font_add_google(name='Open Sans', family='Open Sans')
plot_text <- 'Open Sans'
# Plotting theme
theme_matplotlib <- function () {
theme_bw(base_size=30, base_family = plot_text) %+replace%
theme(
#panel.background  = element_blank(),
#plot.background   = element_rect(fill=NA, colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key        = element_rect(fill="transparent", colour=NA),
legend.text       = element_text(size=36),
legend.title      = element_text(size=36),
panel.grid.major  = element_line(color='gray80', linetype = 'dashed',
linewidth=0.25),
panel.grid.major.x = element_blank(),
panel.grid.minor  = element_blank(),
axis.ticks.length = unit(0.1, 'cm'),
axis.text         = element_text(size=30),
axis.title        = element_text(size=40),
strip.background  = element_rect(
color="black", fill="gray99", linewidth=1.5, linetype="solid"
),
strip.text        = element_text(size=36,
margin = ggplot2::margin(0.25,0.25,0.25,0.25, "cm"))
)
}
showtext_auto()
# Source miscellaneous functions and definitions, for regression formatting mostly
source('./code/1 misc_functions.R')
# Initiate spatial boundary objects
# only needs to be run once
if (SWITCH_NEW_LOAD) {
source('./code/1 iniate_spatial_boundaries.R')
}
# Load circuits
tmp_layers  <- st_layers("./data/PGE/2020 WMP/EDGIS2-12.gdb")
lines_OH   <- st_read("./data/PGE/2020 WMP/EDGIS2-12.gdb",
layer=tmp_layers$name[10])
save(lines_OH, file ='./data/PGE/2020 WMP/EDGIS2-12.RData')
################################################################################
##
## File:    Master script
## Purpose: Source analysis
##
################################################################################
# Setup
rm(list=ls(all=T)); gc()
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/For GitHub/")
# Packages
library(MASS) # be careful here select/dplyr masked
library(tidyverse)
library(sf)
library(lubridate)
library(stargazer)
library(plm)
library(readxl)
library(showtext)
library(lmtest)
library(caret)
library(pROC)
library(doParallel)
# Desired projection CRS
crs_number <- 4326
##################################################################
### Input switch to run key data processing steps from scratch ###
##################################################################
SWITCH_NEW_LOAD <- F
# Relevant file paths
path_spatial <- './data/Spatial Repository/'
path_plots <- './plots/'
# Colors
color_orange    <- '#FB8604'
color_green     <- '#66B032'
color_blue      <- '#347B98'
color_lightblue <- '#b3d9ff'
color_purple    <- '#722B87'
color_red       <- '#7B1920'
color_bu        <- "#5AB4AC"
color_br        <- "#D8B365"
# Palettes
color_scheme <- c(color_orange, color_green, color_blue, color_purple)
main_scheme  <- c("#A6611A", "#DFC27D", "#80CDC1", "#018571")
tranche_scheme <- c('#ffcc00','#ff6600', '#ff0000', '#8c0099')
# Options
sf_use_s2(FALSE)
options(dplyr.summarise.inform=F)
# Plotting parameters
font_add_google(name='Open Sans', family='Open Sans')
plot_text <- 'Open Sans'
# Plotting theme
theme_matplotlib <- function () {
theme_bw(base_size=30, base_family = plot_text) %+replace%
theme(
#panel.background  = element_blank(),
#plot.background   = element_rect(fill=NA, colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key        = element_rect(fill="transparent", colour=NA),
legend.text       = element_text(size=36),
legend.title      = element_text(size=36),
panel.grid.major  = element_line(color='gray80', linetype = 'dashed',
linewidth=0.25),
panel.grid.major.x = element_blank(),
panel.grid.minor  = element_blank(),
axis.ticks.length = unit(0.1, 'cm'),
axis.text         = element_text(size=30),
axis.title        = element_text(size=40),
strip.background  = element_rect(
color="black", fill="gray99", linewidth=1.5, linetype="solid"
),
strip.text        = element_text(size=36,
margin = ggplot2::margin(0.25,0.25,0.25,0.25, "cm"))
)
}
showtext_auto()
# Source miscellaneous functions and definitions, for regression formatting mostly
source('./code/1 misc_functions.R')
# Initiate spatial boundary objects
# only needs to be run once
if (SWITCH_NEW_LOAD) {
source('./code/1 iniate_spatial_boundaries.R')
}
load("./data/PGE/2020 WMP/EDGIS2-12.RData")
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/")
# Source miscellaneous functions and definitions, for regression formatting mostly
source('./code/1 misc_functions.R')
source("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/code/1 master.R")
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/")
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/")
# Weather vars to compile/merge
weather_vars <- c('vpd', 'rmin', 'fm100', 'fm1000',
'tmmx', 'pr', 'vs', 'th',
'erc', 'etr', 'srad', 'sph', 'pet')
# Weather vars to compile/merge
weather_vars <- c('vpd', 'rmin', 'fm100', 'fm1000',
'tmmx', 'pr', 'vs', 'th',
'erc', 'etr', 'srad', 'sph', 'pet')
# Write function
loadWeatherVars <- function(df, w_var) {
# Load
load(paste0('./intermediate_24/compiled_', w_var, '_2023.RData'))
tmp <- out_results
load(paste0('./intermediate/compiled_', w_var, '_2021.RData'))
out_results <- bind_rows(out_results,tmp)
save(out_results,
file=paste0('./Clone/electric-sector-wildfire/intermediate/Intermediate GridMET/compiled_',
w_var))
}
# Weather vars to compile/merge
weather_vars <- c('vpd', 'rmin', 'fm100', 'fm1000',
'tmmx', 'pr', 'vs', 'th',
'erc', 'etr', 'srad', 'sph', 'pet')
# Write function
loadWeatherVars <- function(w_var) {
# Load
load(paste0('./intermediate_24/compiled_', w_var, '_2023.RData'))
tmp <- out_results
load(paste0('./intermediate/compiled_', w_var, '_2021.RData'))
out_results <- bind_rows(out_results,tmp)
save(out_results,
file=paste0('./Clone/electric-sector-wildfire/intermediate/Intermediate GridMET/compiled_',
w_var))
}
# Run function
for(i in 1:length(weather_vars)) {
print(i)
print(weather_vars[i])
# Execute
loadWeatherVars(weather_vars[i])
gc()
}
# Weather vars to compile/merge
weather_vars <- c('vpd', 'rmin', 'fm100', 'fm1000',
'tmmx', 'pr', 'vs', 'th',
'erc', 'etr', 'srad', 'sph', 'pet')
# Write function
loadWeatherVars <- function(w_var) {
# Load
load(paste0('./intermediate_24/compiled_', w_var, '_2023.RData'))
tmp <- out_results
load(paste0('./intermediate/compiled_', w_var, '_2021.RData'))
out_results <- bind_rows(out_results,tmp)
save(out_results,
file=paste0('./Clone/electric-sector-wildfire/intermediate/Intermediate GridMET/compiled_',
w_var, '.RData'))
}
# Run function
for(i in 1:length(weather_vars)) {
print(i)
print(weather_vars[i])
# Execute
loadWeatherVars(weather_vars[i])
gc()
}
source("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/code/1 master.R")
# Load raster file
df_veg <- raster::raster("./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/Tif/LC22_CH_220.tif")
# Load projection
tmp_proj <- raster::crs(df_veg)
# Load circuits
load('./intermediate/PGE_circuits.RData')
# Use same CRS as raster object
lines_OH <-st_transform(lines_OH, tmp_proj)
head(df_veg)
# Grab 2022 crosswalk
xwalk_22 <- read.csv('../data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv') %>%
select(VALUE, Meters)
# Grab 2022 crosswalk
xwalk_22 <- read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv') %>%
select(VALUE, Meters)
read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv')
1000/2
500/60
1500/60
1500/2
750/60
save(df_veg, file='./intermediate/Intermediate Vegetation/lf2022_ch.RData')
load(file='./intermediate/Intermediate Vegetation/lf2022_ch.Rdata')
################################################################################
##
## File:    Master script
## Purpose: Source analysis
##
################################################################################
# Setup
rm(list=ls(all=T)); gc()
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/")
################################################################################
##
## File:    Master script
## Purpose: Source analysis
##
################################################################################
# Setup
rm(list=ls(all=T)); gc()
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/")
# Packages
library(MASS) # be careful here select/dplyr masked
library(tidyverse)
library(sf)
library(lubridate)
library(stargazer)
library(plm)
library(readxl)
library(showtext)
library(lmtest)
library(caret)
library(pROC)
library(doParallel)
################################################################################
##
## File:    Master script
## Purpose: Source analysis
##
################################################################################
# Setup
rm(list=ls(all=T)); gc()
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/")
# Packages
library(MASS) # be careful here select/dplyr masked
library(tidyverse)
library(sf)
library(lubridate)
library(stargazer)
library(plm)
library(readxl)
library(showtext)
library(lmtest)
library(caret)
library(pROC)
library(doParallel)
# Desired projection CRS
crs_number <- 4326
load(file='./intermediate/Intermediate Vegetation/lf2022_ch.Rdata')
head(df_veg)
tail(df_veg)
raster::crs(df_veg)
df_veg
# Grab 2022 crosswalk
xwalk_22 <- read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv') %>%
select(VALUE, Meters)
################################################################################
##
## File:    Master script
## Purpose: Source analysis
##
################################################################################
# Setup
rm(list=ls(all=T)); gc()
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/")
# Packages
library(MASS) # be careful here select/dplyr masked
library(tidyverse)
library(sf)
library(lubridate)
library(stargazer)
library(plm)
library(readxl)
library(showtext)
library(lmtest)
library(caret)
library(pROC)
library(doParallel)
# Desired projection CRS
crs_number <- 4326
##################################################################
### Input switch to run key data processing steps from scratch ###
##################################################################
SWITCH_NEW_LOAD <- F
# Relevant file paths
path_spatial <- './data/Spatial Repository/'
path_plots <- './plots/'
# Colors
color_orange    <- '#FB8604'
color_green     <- '#66B032'
color_blue      <- '#347B98'
color_lightblue <- '#b3d9ff'
color_purple    <- '#722B87'
color_red       <- '#7B1920'
color_bu        <- "#5AB4AC"
color_br        <- "#D8B365"
# Palettes
color_scheme <- c(color_orange, color_green, color_blue, color_purple)
main_scheme  <- c("#A6611A", "#DFC27D", "#80CDC1", "#018571")
tranche_scheme <- c('#ffcc00','#ff6600', '#ff0000', '#8c0099')
# Options
sf_use_s2(FALSE)
options(dplyr.summarise.inform=F)
# Plotting parameters
font_add_google(name='Open Sans', family='Open Sans')
plot_text <- 'Open Sans'
# Plotting theme
theme_matplotlib <- function () {
theme_bw(base_size=30, base_family = plot_text) %+replace%
theme(
#panel.background  = element_blank(),
#plot.background   = element_rect(fill=NA, colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key        = element_rect(fill="transparent", colour=NA),
legend.text       = element_text(size=36),
legend.title      = element_text(size=36),
panel.grid.major  = element_line(color='gray80', linetype = 'dashed',
linewidth=0.25),
panel.grid.major.x = element_blank(),
panel.grid.minor  = element_blank(),
axis.ticks.length = unit(0.1, 'cm'),
axis.text         = element_text(size=30),
axis.title        = element_text(size=40),
strip.background  = element_rect(
color="black", fill="gray99", linewidth=1.5, linetype="solid"
),
strip.text        = element_text(size=36,
margin = ggplot2::margin(0.25,0.25,0.25,0.25, "cm"))
)
}
showtext_auto()
# Source miscellaneous functions and definitions, for regression formatting mostly
source('./code/1 misc_functions.R')
# Initiate spatial boundary objects
# only needs to be run once
if (SWITCH_NEW_LOAD) {
source('./code/1 iniate_spatial_boundaries.R')
}
# Grab 2022 crosswalk
xwalk_22 <- read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv') %>%
select(VALUE, Meters)
select()
read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv')
read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv') %>%
select(VALUE, Meters)
# Grab 2022 crosswalk
xwalk_22 <- as.data.frame(read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv')) %>%
select(VALUE, Meters)
xwalk_22 <- read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv')
xwalk_22
names(xwalk_22)
xwalk_22 %>% select(VALUE)
################################################################################
##
## File:    Master script
## Purpose: Source analysis
##
################################################################################
# Setup
rm(list=ls(all=T)); gc()
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/")
################################################################################
##
## File:    Master script
## Purpose: Source analysis
##
################################################################################
# Setup
rm(list=ls(all=T)); gc()
# Set directory
setwd("C:/Users/codyw/OneDrive/Documents/UC Berkeley/Analysis/Ignitions/Clone/electric-sector-wildfire/")
# Packages
library(MASS) # be careful here select/dplyr masked
library(tidyverse)
library(sf)
library(lubridate)
library(stargazer)
library(plm)
library(readxl)
library(showtext)
library(lmtest)
library(caret)
library(pROC)
library(doParallel)
# Desired projection CRS
crs_number <- 4326
##################################################################
### Input switch to run key data processing steps from scratch ###
##################################################################
SWITCH_NEW_LOAD <- F
# Relevant file paths
path_spatial <- './data/Spatial Repository/'
path_plots <- './plots/'
# Colors
color_orange    <- '#FB8604'
color_green     <- '#66B032'
color_blue      <- '#347B98'
color_lightblue <- '#b3d9ff'
color_purple    <- '#722B87'
color_red       <- '#7B1920'
color_bu        <- "#5AB4AC"
color_br        <- "#D8B365"
# Palettes
color_scheme <- c(color_orange, color_green, color_blue, color_purple)
main_scheme  <- c("#A6611A", "#DFC27D", "#80CDC1", "#018571")
tranche_scheme <- c('#ffcc00','#ff6600', '#ff0000', '#8c0099')
# Options
sf_use_s2(FALSE)
options(dplyr.summarise.inform=F)
# Plotting parameters
font_add_google(name='Open Sans', family='Open Sans')
plot_text <- 'Open Sans'
# Plotting theme
theme_matplotlib <- function () {
theme_bw(base_size=30, base_family = plot_text) %+replace%
theme(
#panel.background  = element_blank(),
#plot.background   = element_rect(fill=NA, colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key        = element_rect(fill="transparent", colour=NA),
legend.text       = element_text(size=36),
legend.title      = element_text(size=36),
panel.grid.major  = element_line(color='gray80', linetype = 'dashed',
linewidth=0.25),
panel.grid.major.x = element_blank(),
panel.grid.minor  = element_blank(),
axis.ticks.length = unit(0.1, 'cm'),
axis.text         = element_text(size=30),
axis.title        = element_text(size=40),
strip.background  = element_rect(
color="black", fill="gray99", linewidth=1.5, linetype="solid"
),
strip.text        = element_text(size=36,
margin = ggplot2::margin(0.25,0.25,0.25,0.25, "cm"))
)
}
showtext_auto()
# Source miscellaneous functions and definitions, for regression formatting mostly
source('./code/1 misc_functions.R')
# Initiate spatial boundary objects
# only needs to be run once
if (SWITCH_NEW_LOAD) {
source('./code/1 iniate_spatial_boundaries.R')
}
########
# 2022 #
########
# Box 1: 42.02409, 38.33632 -- -124.70010, -119.11676
# Box 2: 38.33632, 34.00000 -- -123.70010, -118.00000
# Load raster file
#df_veg <- raster::raster("./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/Tif/LC22_CH_220.tif")
load("./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/Tif/lf2022_ch.RData")
# Load projection
tmp_proj <- raster::crs(df_veg)
# Grab 2022 crosswalk
xwalk_22 <- read.csv('./data/LANDFIRE/landfire 2022/LF2022_CH_220_CONUS/CSV_Data/LF20_CH_220.csv') %>%
select(VALUE, Meters)
# Load raster file
df_veg <- raster::raster("./data/LANDFIRE/landfire_2019/LF2019_CH_200_CONUS/Tif/LC19_CH_200.tif")
# Load raster file
df_veg <- raster::raster("../data/LANDFIRE/landfire_2019/LF2019_CH_200_CONUS/Tif/LC19_CH_200.tif")
# Load raster file
df_veg <- raster::raster("../../data/LANDFIRE/landfire_2019/LF2019_CH_200_CONUS/Tif/LC19_CH_200.tif")
# Load raster file
df_veg <- raster::raster("./data/LANDFIRE/landfire_2019/LF2019_CH_200_CONUS/Tif/LC19_CH_200.tif")
# Load raster file
df_veg <- raster::raster("./data/LANDFIRE/landfire_2019/LF2019_CH_200_CONUS/Tif/LC19_CH_200.tif")
save(df_veg, file='./data/LANDFIRE/landfire_2019/LF2019_CH_200_CONUS/Tif/LC19_CH_200.RData')
# Load raster file
#df_veg <- raster::raster("./data/LANDFIRE/landfire_2019/LF2019_CH_200_CONUS/Tif/LC19_CH_200.tif")
load(file='./data/LANDFIRE/landfire_2019/LF2019_CH_200_CONUS/Tif/LC19_CH_200.RData')
